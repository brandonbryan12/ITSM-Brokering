/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/7.0.85
 * Generated at: 2018-04-05 03:10:50 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.saml2.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.*;
import java.util.logging.Level;
import com.sun.identity.plugin.session.SessionProvider;
import com.sun.identity.plugin.session.SessionManager;
import com.sun.identity.plugin.session.SessionException;
import com.sun.identity.saml2.common.AccountUtils;
import com.sun.identity.saml2.common.NameIDInfoKey;
import com.sun.identity.saml2.common.SAML2Constants;
import com.sun.identity.saml2.common.SAML2Utils;
import com.sun.identity.saml2.jaxb.entityconfig.SPSSOConfigElement;
import com.sun.identity.saml2.logging.LogUtil;
import com.sun.identity.saml2.meta.SAML2MetaManager;
import com.sun.identity.saml2.meta.SAML2MetaException;
import com.sun.identity.saml2.meta.SAML2MetaUtils;
import com.sun.identity.sae.api.SecureAttrs;
import com.sun.identity.sae.api.Utils;
import org.forgerock.openam.utils.ClientUtils;
import org.owasp.esapi.ESAPI;
import java.io.PrintWriter;

public final class SA_005fSP_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write('\n');
      out.write('\n');
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");

    //  Setup http GET/POST to sp app URL
    String action = "POST";
    // Resolve FM-SP's metaAlias
    String spMetaAlias = 
               SAML2MetaUtils.getMetaAliasByUri(request.getRequestURI()) ;

    String servletPath = request.getServletPath();
    String gotoUrl = request.getRequestURL().toString();
    String appBase = gotoUrl.substring(0, gotoUrl.lastIndexOf(servletPath)+1);
    String errorUrl = appBase+"saml2/jsp/saeerror.jsp";
    String ipaddr = ClientUtils.getClientIPAddress(request);
    String userid = null;

    // This FM-SP's entity ID
    String realm = null;
    String spEntityId = null;


    Object token = null;
    SessionProvider provider = null;

    if (spMetaAlias == null) {
        String errStr = errorUrl+"?errorcode=14&errorstring=SP_NullMetaAlias";
	SAML2Utils.debug.error(errStr);
        String data[] = {errStr};
        SAML2Utils.logError(Level.INFO, LogUtil.SAE_SP_ERROR, 
                   data, token, ipaddr, userid, realm, "SAE", null);
        response.sendRedirect(errStr);
        return;
    }

    // Check if a user is already authenticated
    boolean loggedIn = false;
    String loggedinPrincipal = null;
    String loggedinAuthLevel = null;
    String idpEntityId = null;
    try {
        provider = SessionManager.getProvider();
        token = provider.getSession(request);
        if((token != null) && (provider.isValid(token))) {
            loggedIn = true;
            loggedinPrincipal = provider.getPrincipalName(token);
            String[] levelStr =
                    provider.getProperty(token, SessionProvider.AUTH_LEVEL);
            if ((levelStr != null) && (levelStr.length > 0)) {
                loggedinAuthLevel = levelStr[0];
            }
            String[] infoStrs = provider.getProperty(
                token, AccountUtils.getNameIDInfoKeyAttribute());
            if (infoStrs != null && infoStrs.length != 0) {
                String infoStr = infoStrs[0];
                int index = infoStr.lastIndexOf(SAML2Constants.SECOND_DELIM);
                if (index != -1) {
                    infoStr = infoStr.substring(index, infoStr.length());
                }
                NameIDInfoKey infoKey = NameIDInfoKey.parse(infoStr);
                idpEntityId = infoKey.getRemoteEntityID();
            }
        } else {
            token  = null; // for logging
        }
    } catch (SessionException e) {
        SAML2Utils.debug.message("SA_SP:sessionvalidation exc:ignored" , e);
        token  = null; // for logging
        // Assumed not logged in
    } catch (Exception se) {
        if (SAML2Utils.debug.messageEnabled()) {
            SAML2Utils.debug.message("SA_SP:error parsing NameInfoKey:", se);
        }
    }

    if (loggedIn == false ) {
        String errStr = errorUrl+"?errorcode=5&errorstring=SP_No_SSOToken";
	SAML2Utils.debug.error(errStr);
        String data[] = {errStr};
        SAML2Utils.logError(Level.INFO, LogUtil.SAE_SP_ERROR, 
                   data, token, ipaddr, userid, realm, "SAE", null);
        response.sendRedirect(errStr);
        return;
    }
    String spApp = (String) request.getParameter(SecureAttrs.SAE_PARAM_SPAPPURL);
    if (!ESAPI.validator().isValidInput("HTTP Parameter Value: " + spApp, spApp, "URL", 2000, true)) {
            spApp = null;
    }
    if (spApp == null ) {
        String errStr = errorUrl+"?errorcode=6&errorstring=SP_NOSPAppURL";
	    SAML2Utils.debug.error(errStr);
        String data[] = {errStr};
        SAML2Utils.logError(Level.INFO, LogUtil.SAE_SP_ERROR, 
                   data, token, ipaddr, userid, realm, "SAE", null);
        response.sendRedirect(errStr);
        return;
    }

    if (idpEntityId == null) {
        String errStr = errorUrl + "?errorcode=8&errorstring=SP_NOIDPEntityID";
        String data[] = {errStr};
        SAML2Utils.logError(Level.INFO, LogUtil.SAE_SP_ERROR, 
                   data, token, ipaddr, userid, realm, "SAE", null);
        response.sendRedirect(errStr);
        return;
    }

    HashMap map = new HashMap();
    map.put(SecureAttrs.SAE_PARAM_AUTHLEVEL, loggedinAuthLevel);
    map.put(SecureAttrs.SAE_PARAM_IDPENTITYID, idpEntityId);
    try {
        realm = SAML2MetaUtils.getRealmByMetaAlias(spMetaAlias);
        SAML2MetaManager mm = SAML2Utils.getSAML2MetaManager();
        spEntityId = mm.getEntityByMetaAlias(spMetaAlias);
        // get attr list from configuration
        SPSSOConfigElement spConfig = mm.getSPSSOConfig(realm, spEntityId);
        if (spConfig != null) {
            Map attrs = SAML2MetaUtils.getAttributes(spConfig);
            if (attrs != null) {
                List value = (List) attrs.get(SAML2Constants.ATTRIBUTE_MAP);
                if (value != null && !value.isEmpty()) {
                    Iterator valueIter = value.iterator();
                    while (valueIter.hasNext()) {
                        String entry = (String) valueIter.next();
                        StringTokenizer st = new StringTokenizer(entry, "=");
                        if (st.countTokens() != 2) {
                            continue;
                        }
                        st.nextToken();
                        String localAttr = st.nextToken();
                        String[] vals = provider.getProperty(token,localAttr);
                        if ((vals != null) && (vals.length > 0)) {
                            map.put(localAttr, vals[0]);
                        }
                    }
                }
            }
        }
    } catch (SAML2MetaException se) {
    }
    map.put(SecureAttrs.SAE_PARAM_SPENTITYID, spEntityId);
    
    // Get SAE attributes relating to FM-SP and SPApp
    Map hp = SAML2Utils.getSAEAttrs(
        realm, spEntityId, SAML2Constants.SP_ROLE, spApp);

    if (hp == null) {
        String errStr = errorUrl
                        +"?errorcode=13&errorstring=Error_invalid_SAEAttrs:"
                        +spApp;
	SAML2Utils.debug.error(errStr);
        String data[] = {errStr};
        SAML2Utils.logError(Level.INFO, LogUtil.SAE_SP_ERROR, 
                   data, token, ipaddr, userid, realm, "SAE", null);
        response.sendRedirect(errStr);
        return;
    }

    String secret = null;
    String encSecret = null;
    String cryptoType = (String) hp.get(SecureAttrs.SAE_CRYPTO_TYPE);
    if (SecureAttrs.SAE_CRYPTO_TYPE_SYM.equals(cryptoType)) {
        secret = (String) hp.get(SecureAttrs.SAE_CONFIG_SHARED_SECRET);
        encSecret = secret;
    } else if (SecureAttrs.SAE_CRYPTO_TYPE_ASYM.equals(cryptoType)) {
        secret = (String) hp.get(SecureAttrs.SAE_CONFIG_PRIVATE_KEY_ALIAS);
        encSecret = (String) hp.get(SecureAttrs.SAE_CONFIG_PUBLIC_KEY_ALIAS);
    }
    if (secret == null || secret.length() == 0) {
        String errStr = errorUrl
                        +"?errorcode=13&errorstring=Error_invalid_sharedSecret:"
                        +spApp;
	SAML2Utils.debug.error(errStr);
        String data[] = {errStr};
        SAML2Utils.logError(Level.INFO, LogUtil.SAE_SP_ERROR, 
                   data, token, ipaddr, userid, realm, "SAE", null);
        response.sendRedirect(errStr);
        return;
    }

    String encAlg =
        (String)hp.get(SecureAttrs.SAE_CONFIG_DATA_ENCRYPTION_ALG);
    String encStrength =
           (String)hp.get(SecureAttrs.SAE_CONFIG_ENCRYPTION_KEY_STRENGTH);
    String saInstanceName = cryptoType + "_" + encAlg + "_" + encStrength;
    SecureAttrs sa = SecureAttrs.getInstance(saInstanceName);
    if (sa == null) {
        Properties prop = new Properties();
        prop.setProperty(SecureAttrs.SAE_CONFIG_CERT_CLASS, 
            "com.sun.identity.sae.api.FMCerts");
        if(encAlg != null) {
           prop.setProperty(SecureAttrs.SAE_CONFIG_DATA_ENCRYPTION_ALG,encAlg);
        }
        if(encStrength != null) {
           prop.setProperty(SecureAttrs.SAE_CONFIG_ENCRYPTION_KEY_STRENGTH,
                encStrength);
        }
        SecureAttrs.init(saInstanceName, cryptoType, prop);
        sa = SecureAttrs.getInstance(saInstanceName);
    }
    if (encAlg == null) {
        encSecret = null;
    }
    String encodedString = sa.getEncodedString(map, secret, encSecret);
    if (encodedString == null) {
       String errStr = errorUrl
                       +"?errorcode=7&errorstring=Couldnt_secure_attrs:"
                       +map;
	SAML2Utils.debug.error(errStr);
        String data[] = {errStr};
        SAML2Utils.logError(Level.INFO, LogUtil.SAE_SP_ERROR, 
                   data, token, ipaddr, userid, realm, "SAE", null);
        response.sendRedirect(errStr);
        return;
    }
    HashMap sParams = new HashMap();
    sParams.put(SecureAttrs.SAE_PARAM_DATA, encodedString);

    String data[] = {map.toString()};
    SAML2Utils.logAccess(Level.INFO, LogUtil.SAE_SP_SUCCESS, 
               data, token, ipaddr, userid, realm, "SAE", null);
    // Comment this redirect and uncomment the below href for debugging. 
    // The href at the bottom will take effect
    try {
        if (spApp != null && SAML2Utils.isRelayStateURLValid(request, spApp, SAML2Constants.SP_ROLE)) {
            Utils.redirect(response, new PrintWriter(out, true), spApp, sParams, action);
        } else {
            throw new Exception("Redirect URL was not valid " + spApp);
        }
    } catch (Exception ex) {
       String errStr = errorUrl
                       +"?errorcode=7&errorstring=Couldnt_redirect:"+ex
                       +" Map="+map;
	SAML2Utils.debug.error(errStr);
        String data1[] = {errStr};
        SAML2Utils.logError(Level.INFO, LogUtil.SAE_SP_ERROR, 
                   data1, token, ipaddr, userid, realm, "SAE", null);
        response.sendRedirect(errStr);
        return;
    }
/*
String ssoUrl = spApp+"?"+SecureAttrs.SAE_PARAM_DATA+"="+ encodedString;

      out.write("\n");
      out.write("    <br> DEBUG : We are in SAE handler deployed on FM in SP role.\n");
      out.write("    <br> Click <a href=");
      out.print(ssoUrl);
      out.write(">here </a> to continue SSO with SP.\n");
      out.write("    <br> Edit saml2/jsp/SA_SP.jsp and uncomment the \"Utils.redirect(..)\" line to execute a redirect automatically so that the user doesnt see this debug page.\n");

*/

      out.write('\n');
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
