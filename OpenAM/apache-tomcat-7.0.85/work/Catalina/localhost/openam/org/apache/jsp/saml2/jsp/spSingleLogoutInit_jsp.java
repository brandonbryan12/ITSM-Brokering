/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/7.0.85
 * Generated at: 2018-04-05 03:10:51 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.saml2.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import com.sun.identity.plugin.session.SessionManager;
import com.sun.identity.plugin.session.SessionException;
import com.sun.identity.saml.common.SAMLUtils;
import com.sun.identity.saml2.common.SAML2Utils;
import com.sun.identity.saml2.common.SAML2Constants;
import com.sun.identity.saml2.jaxb.entityconfig.SPSSOConfigElement;
import com.sun.identity.saml2.meta.SAML2MetaManager;
import com.sun.identity.saml2.meta.SAML2MetaUtils;
import com.sun.identity.saml2.common.SAML2Exception;
import com.sun.identity.saml2.profile.LogoutUtil;
import com.sun.identity.saml2.profile.SPCache;
import com.sun.identity.saml2.profile.SPSingleLogout;
import java.util.HashMap;
import java.util.List;
import org.owasp.esapi.ESAPI;

public final class spSingleLogoutInit_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write('\n');
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write('\n');
      out.write('\n');

    // Retrieves the Request Query Parameters
    // Binding are the required query parameters
    // binding - binding used for this request

    try {
        String RelayState = request.getParameter(SAML2Constants.RELAY_STATE);
        if (RelayState == null || RelayState.isEmpty()) {
            RelayState = request.getParameter(SAML2Constants.GOTO);
        }
        if (!ESAPI.validator().isValidInput("RelayState", RelayState, "HTTPQueryString", 2000, true)) {
            RelayState = null;
        }

        String metaAlias = null;

        Object ssoToken = null;
        try {
            ssoToken = SessionManager.getProvider().getSession(request);
        } catch (SessionException se) {
            if (SAML2Utils.debug.messageEnabled()) {
                SAML2Utils.debug.message("No session.");
            }
            ssoToken = null;
        }

        String spEntityID = null;
        SAML2MetaManager manager = new SAML2MetaManager();
        if (!SPCache.isFedlet) {
            if (ssoToken == null) {
                //There is no local session, so we can't perform the logout on the IdP,
                //let's just return with HTTP 200
                if (RelayState != null && !RelayState.isEmpty()
                        && SAML2Utils.isRelayStateURLValid(request, RelayState, SAML2Constants.SP_ROLE)
                        && ESAPI.validator().isValidInput("RelayState", RelayState, "URL", 2000, true)) {
                    response.sendRedirect(RelayState);
                } else {
                    
      out.write("\n");
      out.write("                        ");
      if (true) {
        _jspx_page_context.forward("/saml2/jsp/default.jsp?message=spSloSuccess");
        return;
      }
      out.write("\n");
      out.write("                    ");

                }
                return;
            }
            String[] values = SessionManager.getProvider().
                getProperty(ssoToken, SAML2Constants.SP_METAALIAS);
            if (values != null && values.length > 0) {
                metaAlias = values[0];
            }
        } else {
            spEntityID = request.getParameter("spEntityID");
            if ((spEntityID == null) || (spEntityID.length() == 0)) {
                List spMetaAliases =
                    manager.getAllHostedServiceProviderMetaAliases("/");
                if ((spMetaAliases != null) && !spMetaAliases.isEmpty()) {
                    // get first one
                    metaAlias = (String) spMetaAliases.get(0);
                }
            } else {
                SPSSOConfigElement spConfig = 
                    manager.getSPSSOConfig("/", spEntityID);
                if (spConfig != null) {
                    metaAlias = spConfig.getMetaAlias();
                }
            } 
        }
        if (metaAlias == null) {
            try {
                SessionManager.getProvider().invalidateSession(
                    ssoToken, request, response);
            } catch (SessionException se) {
                if (SAML2Utils.debug.messageEnabled()) {
                    SAML2Utils.debug.message("No session.");
                }
            }
            if (RelayState != null && SAML2Utils.isRelayStateURLValid(request, RelayState, SAML2Constants.SP_ROLE)
                    && ESAPI.validator().isValidInput("RelayState", RelayState, "URL", 2000, true)) {
                response.sendRedirect(RelayState);
            } else {
                
      out.write("\n");
      out.write("                ");
      if (true) {
        _jspx_page_context.forward("/saml2/jsp/default.jsp?message=spSloSuccess");
        return;
      }
      out.write("\n");
      out.write("                ");

            }
            return;
        }

        String idpEntityID = request.getParameter("idpEntityID");
        String binding = LogoutUtil.getSLOBindingInfo(request, metaAlias,
                                        SAML2Constants.SP_ROLE, idpEntityID);
        if (spEntityID == null) {
            spEntityID = manager.getEntityByMetaAlias(metaAlias);
        }
        String realm = SAML2MetaUtils.getRealmByMetaAlias(metaAlias);

        /**
        * Parses the request parameters and builds the Logout
        * Request to be sent to the IDP.
        *
        * @param request the HttpServletRequest.
        * @param response the HttpServletResponse.
        * @param metaAlias metaAlias of Service Provider. The format of
        *               this parameter is /realm_name/SP_name.
        * @param binding binding used for this request.
        * @param paramsMap Map of all other parameters.
        *       Following parameters names with their respective
        *       String values are allowed in this paramsMap.
        *       "RelayState" - the target URL on successful Single Logout
        *       "Destination" - A URI Reference indicating the address to
        *                       which the request has been sent.
        *       "Consent" - Specifies a URI a SAML defined identifier
        *                   known as Consent Identifiers.
        *       "Extension" - Specifies a list of Extensions as list of
        *                   String objects.
        * @throws SAML2Exception if error initiating request to IDP.
        */
        HashMap paramsMap = new HashMap();
        if (SPCache.isFedlet) {
            String sessionIndex = request.getParameter("SessionIndex");
            if ((sessionIndex == null) || (sessionIndex.length() == 0)) {
                SAMLUtils.sendError(request, response, response.SC_BAD_REQUEST,
                    "nullSessionIndex",
                    SAML2Utils.bundle.getString("nullSessionIndex"));
                return;
            } else {
                paramsMap.put("SessionIndex", sessionIndex);
            }
            String nameID = request.getParameter("NameIDValue");
            if ((nameID == null) || (nameID.length() == 0)) {
                SAMLUtils.sendError(request, response, response.SC_BAD_REQUEST,
                    "nullNameID",
                    SAML2Utils.bundle.getString("nullNameID"));
                return;
            } else {
                if (spEntityID == null) {
                    if (manager == null) {
                        manager = new SAML2MetaManager();    
                    }
                    spEntityID = manager.getEntityByMetaAlias(metaAlias);
                }
                if (idpEntityID == null) {
                    SAMLUtils.sendError(request, response, 
                        response.SC_BAD_REQUEST,
                        "nullIDPEntityID",
                        SAML2Utils.bundle.getString("nullIDPEntityID"));
                    return;
                }
                paramsMap.put(
                    "infoKey", spEntityID+ "|" + idpEntityID + "|" + nameID);
            }
           
        }
        paramsMap.put("metaAlias", metaAlias);
        paramsMap.put("idpEntityID", idpEntityID);
        paramsMap.put(SAML2Constants.ROLE, SAML2Constants.SP_ROLE);
        paramsMap.put(SAML2Constants.BINDING, binding);
        paramsMap.put("Destination", request.getParameter("Destination"));
        paramsMap.put("Consent", request.getParameter("Consent"));
        paramsMap.put("Extension", request.getParameter("Extension"));
        if (RelayState == null || RelayState.isEmpty()) {
            RelayState = SAML2Utils.getAttributeValueFromSSOConfig(
                realm, spEntityID, SAML2Constants.SP_ROLE,
                SAML2Constants.DEFAULT_RELAY_STATE);
        }
        if (RelayState != null) {
            paramsMap.put(SAML2Constants.RELAY_STATE, RelayState);
        }

        String sessionIndex = request.getParameter("sessionIndex");
        SPSingleLogout.initiateLogoutRequest( request,response,
            binding,paramsMap);
        
        if (binding.equalsIgnoreCase(SAML2Constants.SOAP)) {
            if (RelayState != null && !RelayState.isEmpty()
                    && SAML2Utils.isRelayStateURLValid(metaAlias, RelayState, SAML2Constants.SP_ROLE)
                    && ESAPI.validator().isValidInput("RelayState", RelayState, "URL", 2000, true)) {
                response.sendRedirect(RelayState);
            } else {
                
      out.write("\n");
      out.write("                ");
      if (true) {
        _jspx_page_context.forward("/saml2/jsp/default.jsp?message=spSloSuccess");
        return;
      }
      out.write("\n");
      out.write("                ");

            }
        }
    } catch (SAML2Exception sse) {
        SAML2Utils.debug.error("Error sending Logout Request " , sse);
        SAMLUtils.sendError(request, response, response.SC_BAD_REQUEST,
            "LogoutRequestCreationError",
            SAML2Utils.bundle.getString("LogoutRequestCreationError") + " " +
            sse.getMessage());
        return;
    } catch (Exception e) {
        SAML2Utils.debug.error("Error initializing Request ",e);
        SAMLUtils.sendError(request, response, response.SC_BAD_REQUEST,
            "LogoutRequestCreationError",
            SAML2Utils.bundle.getString("LogoutRequestCreationError") + " " +
            e.getMessage());
        return;
    }

      out.write('\n');
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
