/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/7.0.85
 * Generated at: 2018-04-05 03:23:40 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.console.ajax;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import com.iplanet.am.util.SystemProperties;
import com.iplanet.sso.SSOException;
import com.iplanet.sso.SSOToken;
import com.iplanet.sso.SSOTokenManager;
import com.sun.identity.idm.AMIdentity;
import com.sun.identity.idm.IdRepoException;
import com.sun.identity.idm.IdType;
import com.sun.identity.security.AdminTokenAction;
import com.sun.identity.console.base.AMViewBeanBase;
import com.sun.identity.workflow.ITask;
import com.sun.identity.workflow.WorkflowException;
import java.security.AccessController;
import java.util.*;
import org.owasp.esapi.ESAPI;
import com.sun.identity.shared.debug.Debug;

public final class AjaxProxy_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write('\n');
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");

		response.setContentType("text/plain; charset=UTF-8");
        request.setCharacterEncoding("UTF-8");
        String locale = request.getParameter("locale");
        if (!ESAPI.validator().isValidInput("HTTP Parameter Value: " + locale, locale, "HTTPParameterValue", 200,
                true)) {
            locale = null;
        }
        Locale resLocale = null;
        if ((locale != null) && (!locale.isEmpty())) {
            StringTokenizer st = new StringTokenizer(locale, "|");
            int cnt = st.countTokens();
            if (cnt == 1) {
                resLocale = new Locale(st.nextToken());
            } else if (cnt == 2) {
                resLocale = new Locale(st.nextToken(), st.nextToken());
            } else {
                resLocale = new Locale(st.nextToken(), st.nextToken(),
                        st.nextToken());
            }
        } else {
            resLocale = Locale.US;
        }
        

        String amadminUUID = null;
        String adminUser = SystemProperties.get(
                "com.sun.identity.authentication.super.user");
        if (adminUser != null) {
            SSOToken adminToken = (SSOToken) AccessController.doPrivileged(
                    AdminTokenAction.getInstance());
            AMIdentity adminUserId = new AMIdentity(adminToken, adminUser,
                    IdType.USER, "/", null);
            amadminUUID = adminUserId.getUniversalId();
        }

        try {
            SSOTokenManager manager = SSOTokenManager.getInstance();
            SSOToken ssoToken = manager.createSSOToken(request);

            if (!manager.isValidToken(ssoToken)) {
                String redirectUrl = request.getScheme() + "://" +
                        request.getServerName() + ":" +
                        request.getServerPort() +
                        request.getContextPath();
                response.sendRedirect(redirectUrl);
                return;
            }

            AMIdentity user = new AMIdentity(ssoToken);
            if (!user.getUniversalId().equalsIgnoreCase(amadminUUID)) {

                ResourceBundle rb = null;
                String RB_NAME = "workflowMessages";              
                com.sun.identity.shared.debug.Debug debug =
                        com.sun.identity.shared.debug.Debug.getInstance("workflowMessages");
                rb = ResourceBundle.getBundle(RB_NAME, resLocale);
                String msg = com.sun.identity.shared.locale.Locale.getString(
                        rb, "ajax.user.privilege.invalid", debug);
                throw new RuntimeException(msg);
            }

        } catch (SSOException ssoe) {
            String redirectUrl = request.getScheme() + "://" +
                    request.getServerName() + ":" +
                    request.getServerPort() +
                    request.getContextPath();
            response.sendRedirect(redirectUrl);
            return;
        } catch (IdRepoException ex) {
            String redirectUrl = request.getScheme() + "://" +
                    request.getServerName() + ":" +
                    request.getServerPort() +
                    request.getContextPath() +
                    "/base/AMUncaughtException";
            response.sendRedirect(redirectUrl);
            return;
        }

        String clazzName = request.getParameter("class");
        if (clazzName == null || !ESAPI.validator().isValidInput("HTTP Parameter Value: " + clazzName,
                clazzName, "HTTPParameterValue", 2000, false)) {
            String redirectUrl = request.getScheme() + "://" +
                    request.getServerName() + ":" +
                    request.getServerPort() +
                    request.getContextPath() +
                    "/base/AMUncaughtException";
            response.sendRedirect(redirectUrl);
            return;
        }
        try {
            Class clazz = Class.forName(clazzName);
            ITask task = (ITask) clazz.newInstance();

            Map map = new HashMap();
            for (Enumeration e = request.getParameterNames(); e.hasMoreElements();) {
                String n = (String) e.nextElement();
                if (!n.equals("class") && !n.equals("locale")) {
                    map.put(n, request.getParameter(n));
                }
            }

            map.put("_servlet_context_", getServletConfig().getServletContext());
            map.put("_request_", request);
            out.println("0|" + task.execute(resLocale, map));
        } catch (WorkflowException e) {
            out.write("1|" + AMViewBeanBase.stringToHex(
                    ESAPI.encoder().encodeForHTML(e.getL10NMessage(resLocale))));
        } catch (IllegalAccessException e) {
            out.write("1|" + ESAPI.encoder().encodeForHTML(e.getMessage()));
        } catch (InstantiationException e) {
            out.write("1|" + ESAPI.encoder().encodeForHTML(e.getMessage()));
        } catch (ClassNotFoundException e) {
            out.write("1|" + ESAPI.encoder().encodeForHTML(e.getMessage()));
        } catch (ClassCastException e) {
            out.write("1|" + ESAPI.encoder().encodeForHTML(e.getMessage()));
        } catch (Exception e) {
            Debug.getInstance("workflow").error("Uncaught exception in AjaxProxy", e);
            response.sendRedirect(request.getContextPath() + "/base/AMUncaughtException");
        }


      out.write('\n');
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
